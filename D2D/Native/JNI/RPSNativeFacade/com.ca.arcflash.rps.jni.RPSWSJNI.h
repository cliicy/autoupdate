/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com.ca.arcflash.rps.jni.RPSWSJNI */

#ifndef _Included_com_ca_arcflash_rps_jni_RPSWSJNI_h
#define _Included_com_ca_arcflash_rps_jni_RPSWSJNI_h
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreAddInstance
 * Signature: (Lcom/ca/arcflash/webservice/rps/data/ds/DataStoreSettingInfo;)J
 */
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreAddInstance
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreAddInstanceOnExistingPath
 * Signature: (Lcom/ca/arcflash/webservice/rps/data/ds/DataStoreSettingInfo;)Lcom/ca/arcflash/webservice/rps/data/ds/DataStoreSettingInfo;
 */
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreAddInstanceOnExistingPath
  (JNIEnv *, jclass, jobject);


/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    DataStoreGetInfoFromDisk
 * Signature: (Ljava/util/List;)J
 */
JNIEXPORT jobject JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetInfoFromDisk
	(JNIEnv * env, jclass clz, jstring jstrPath, jstring jstrPathUser, jstring jstrPathPsw, jstring jstrDSPsw);


JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreUnlockImport
	(JNIEnv * env, jclass clz, jstring jstrPath, jstring jstrPathUser, jstring jstrPathPsw);


JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetDedupeRequiredMinMemSize
	(JNIEnv * env, jclass clz, jstring jstrDSGUID);


JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetNewDSSharedName
	(JNIEnv * env, jclass clz, jstring jstrDSName);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreModifyInstance
 * Signature: (Lcom/ca/arcflash/webservice/rps/data/ds/DataStoreSettingInfo;)J
 */
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreModifyInstance
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreGetInstance
 * Signature: (Ljava/lang/String;)Lcom/ca/arcflash/webservice/rps/data/ds/DataStoreSettingInfo;
 */
JNIEXPORT jobject JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetInstance
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreRemoveInstance
 * Signature: (Ljava/lang/String;Z)J
 */
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreRemoveInstance
  (JNIEnv *, jclass, jstring, jboolean);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreStartInstance
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreStartInstance
  (JNIEnv *, jclass, jstring);


/*
* Class:     com_ca_arcflash_webservice_jni_WSJNI
* Method:    DataStoreStartInstance
* Signature: (Ljava/lang/String;)J
*/
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreStartInstanceReadonly
(JNIEnv *, jclass, jstring);


/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreStopInstance
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreStopInstance
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreGetInstanceList
 * Signature: ()[Lcom/ca/arcflash/webservice/rps/data/ds/DataStoreSettingInfo;
 */
JNIEXPORT jobjectArray JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetInstanceList
  (JNIEnv *, jclass);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreGetNodeList
 * Signature: ()[Lcom/ca/arcflash/webservice/data/restore/BackupDataStoreD2D;
 */
JNIEXPORT jobjectArray JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetNodeList
  (JNIEnv * env, jclass clz, jstring jstr);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    DataStoreGetNodeListByShareFolder
* Signature: (Lcom/ca/arcflash/service/jni/model/JNetConnInfo;)J
*/
JNIEXPORT jobjectArray JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetNodeListByShareFolder
  (JNIEnv * env, jclass clz, jobject jobjConnInfo);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreGetStatusList
 * Signature: ()[Lcom/ca/arcflash/webservice/rps/data/ds/DataStoreStatusListElem;
 */
JNIEXPORT jobjectArray JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetStatusList
  (JNIEnv *, jclass);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreGetFreeMemory
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetFreeMemory
  (JNIEnv *, jclass);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreGetInstanceStatus
 * Signature: (Ljava/lang/String;)Lcom/ca/arcflash/webservice/rps/data/datastore/DataStoreStatus;
 */
JNIEXPORT jobject JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetInstanceStatus
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreGetHashMachineConf
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreGetHashMachineConf
  (JNIEnv *, jclass);


JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreUpdateDSPathStatus
	(JNIEnv * env, jclass clz, jstring jstr);

JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreUpdateDSStatus
	(JNIEnv * env, jclass clz, jstring jstr);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreInitialize
 * Signature: ()J
 */
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreInitialize
  (JNIEnv *, jclass);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    DataStoreUninitialize
 * Signature: ()J
 */
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreUninitialize
  (JNIEnv *, jclass);


/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    RPSEncryptString
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSEncryptString
(JNIEnv *, jclass, jstring);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    RPSDecryptString
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSDecryptString
(JNIEnv *, jclass, jstring);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    OperateNetworkThrottling
* Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_OperateNetworkThrottling
(JNIEnv *, jclass, jstring, jstring, jstring);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    AFReplicate
* Signature: (Lcom/ca/arcflash/rps/jni/model/JReplicationJobScript;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFReplicate
	(JNIEnv *, jclass , jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    GSetRPSJobID
* Signature: (Lcom/ca/arcflash/webservice/jni/model/JRWLong;)Z
*/
JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetRPSJobID
	(JNIEnv *, jclass, jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    CreateRPSJobMonitor
* Signature: (Lcom/ca/arcflash/webservice/jni/model/JRWLong;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_CreateRPSJobMonitor
	(JNIEnv *, jclass, jlong);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    GetRPSJobMonitor
* Signature: (Lcom/ca/arcflash/webservice/jni/model/JRWLong;com/ca/arcflash/rps/jni/model/JRPSJobMonitor)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetRPSJobMonitor
	(JNIEnv *, jclass, jlong, jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    ReleaseRPSJobMonitor
* Signature: (Lcom/ca/arcflash/webservice/jni/model/JRWLong;)J
*/
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_ReleaseRPSJobMonitor
	(JNIEnv *, jclass, jlong);


/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    BrowseFileFolderItemEx
 * Signature: (Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_BrowseFileFolderItemEx
  (JNIEnv *, jclass, jstring, jint, jint, jstring, jstring, jstring, jobject);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    AFGetErrorMsg
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFGetErrorMsg
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    BrowseVolumeInforamtion
 * Signature: (Ljava/util/ArrayList;ZLjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_BrowseVolumeInforamtion
  (JNIEnv *, jclass, jobject, jboolean, jstring);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    AFCGRTSkipDisk
 * Signature: (Ljava/lang/String;Lcom/ca/arcflash/webservice/jni/model/JRWLong;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFCGRTSkipDisk
  (JNIEnv *, jclass, jstring, jobject);


/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    AFCreateDir
 * Signature: (Ljava/lang/String;Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFCreateDir
  (JNIEnv *, jclass, jstring, jstring);

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFCreateAllDirs
	(JNIEnv *env, jclass clz, jstring);

JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetRegRootPathByProduct
	(JNIEnv *env, jclass clz);
	
/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    RPSLogActivity
* Signature: (Lcom/ca/arcflash/webservice/jni/model/JRWLong;)J
*/
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSLogActivity
	(JNIEnv *env, jclass clz, jlong level, jlong jobID, jlong resourceID, jobjectArray parameters, jstring vmIndentification);

JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSLogActivityDetail2
	(JNIEnv *env, jclass clz, jobject jActLogDetail, jlong resourceID, jobjectArray parameters);

JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSGetLogActivity
	(JNIEnv *env, jclass clz,  jlong jobID, jstring vmIndentification, jint startFrom, jint requestCount, jobject activityLogResult);

/*
 * Class:     Java_com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    GetControlRPSJobHandle
 * Signature: (JZLcom/ca/arcflash/webservice/data/ControlJobFilter;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetControlRPSJobHandle
	(JNIEnv *env, jclass clz, jlong flag, jboolean isAsync, jobject jFilter);

/*
 * Class:     Java_com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    ControlRPSJobs
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_ControlRPSJobs(JNIEnv * env, jclass clz, jlong handle);

/*
 * Class:     Java_com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    FreeControlRPSJobHandle
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_FreeControlRPSJobHandle(JNIEnv * env, jclass clz, jlong handle);

/*
 * Class:     Java_com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    GetControlRPSJobStatus
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetControlRPSJobStatus(JNIEnv * env, jclass clz, jlong handle);

JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSDecryptStringWithEarlyVersion(JNIEnv *env, jclass clz, jstring jstr);

JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSEcryptStringWithEarlyVersion(JNIEnv *env, jclass clz, jstring jstr);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    AFCutConnection
 * Signature: (Lcom/ca/arcflash/webservice/jni/model/JNetConnInfo;Z)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFCutConnection
  (JNIEnv *, jclass, jobject, jboolean);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    AFCreateConnection
 * Signature: (Lcom/ca/arcflash/service/jni/model/JNetConnInfo;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFCreateConnection
  (JNIEnv *, jclass, jobject);
/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    AFRetrieveConnections
 * Signature: (Ljava/util/ArrayList;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFRetrieveConnections
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    AFCheckFolderAccess
 * Signature: (Lcom/ca/arcflash/webservice/jni/model/JNetConnInfo;Ljava/util/ArrayList;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFCheckFolderAccess
  (JNIEnv *, jclass, jobject, jobject);


JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_validate
  (JNIEnv *, jclass, jstring, jstring, jstring);

/*
 * Class:     com_ca_arcflash_webservice_jni_WSJNI
 * Method:    cancelJob
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSCancelJob
  (JNIEnv *, jclass, jlong);

JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSCheckNewSessionsToReplicate
	(JNIEnv *, jclass, jstring, jstring, jstring);
	
/*
 * Class:     Java_com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    AFGetPathMaxLength
 * Signature: (J);
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFGetPathMaxLength
(JNIEnv *env, jclass);
	

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSCreateClientJobSharedQueue
	(JNIEnv *, jclass);

JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSWaitForNewClientJobArrival
	(JNIEnv *, jclass, jlong, jobject);

JNIEXPORT void JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSDestroyClientJobSharedQueue
	(JNIEnv *, jclass, jlong);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getActiveJobs
 * Signature: (Ljava/util/ArrayList;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getActiveJobs
	(JNIEnv*, jclass, jobject);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    startService
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_startService
	(JNIEnv*, jclass, jstring);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    startMerge
 * Signature: (Lcom/ca/arcflash/service/jni/model/MergeJobScript;Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_startMerge
  (JNIEnv *, jclass, jobject, jstring);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    stopMerge
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_stopMerge
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getMergeJobMonitor
 * Signature: (JLcom/ca/arcflash/webservice/data/merge/MergeJobMonitor;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getMergeJobMonitor
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    createMergeJobMonitor
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_createMergeJobMonitor
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    releaseMergeJobMonitor
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_releaseMergeJobMonitor
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    isMergeJobAvailable
 * Signature: (ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_isMergeJobAvailable
  (JNIEnv *, jclass, jint, jstring, jstring, jstring, jstring, jstring);
/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    RPSIIsMergeJobAvailableEx
 * Signature: (Ljava/lang/String;IIIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSIIsMergeJobAvailableEx
  (JNIEnv *, jclass, jstring, jint, jint, jint, jint, jstring, jstring, jstring, jstring);
/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    AFIRetrieveMergeJM
 * Signature: (Ljava/util/List;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFIRetrieveMergeJM
  (JNIEnv *, jclass, jobject);


/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    RPSSendClientJobRunCmdOnJobArrival
* Signature: (Lcom/ca/arcflash/rps/jni/model/JRPSJobInfo;)J
*/
JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSSendClientJobRunCmdOnJobArrival
	(JNIEnv* env, jclass clz, jobject jRpsJobInfo);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    RPSSendClientJobStopCmdOnJobArrival
* Signature: (Lcom/ca/arcflash/rps/jni/model/JRPSJobInfo;)J
*/
JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSSendClientJobStopCmdOnJobArrival
	(JNIEnv* env, jclass clz, jobject jRpstJobInfo, jint jStopReason);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    updateRPSJobHistory
 * Signature: (JJJLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_updateRPSJobHistory
	(JNIEnv *, jclass, jobject jJobHistory);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getRPSServerSID
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getRPSServerSID
  (JNIEnv *, jclass);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    markRPSJobEnd
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_markRPSJobEnd
       (JNIEnv *, jclass, jlong, jlong );

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getActivityLogPaths4Sync
 * Signature: (IZLjava/lang/String;Ljava/util/ArrayList;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getActivityLogPaths4Sync
  (JNIEnv *, jclass, jint, jstring, jobject);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getActivityLogPaths4Sync
 * Signature: (IZLjava/lang/String;Ljava/util/ArrayList;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getActivityLogPaths4FullSync
  (JNIEnv *, jclass, jint, jstring, jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    getJobHistoryPaths4IncrementalSync
* Signature: (Ljava/util/ArrayList;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getJobHistoryPaths4IncrementalSync
	(JNIEnv *, jclass, jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    getJobHistoryPaths4FullSync
* Signature: (Ljava/util/ArrayList;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getJobHistoryPaths4FullSync
	(JNIEnv *, jclass, jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    getJobHistoryPaths4FullSync
* Signature: (JJLcom/ca/arcflash/service/jni/model/JJobHistoryFilterCol;Lcom/ca/arcflash/service/jni/model/JJobHistoryResult)J
*/
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getJobHistory
	(JNIEnv *, jclass, jlong, jlong, jobject, jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    addMissedRPSJobHistory
* Signature: (JJJJLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
*/
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_addMissedRPSJobHistory
	(JNIEnv *, jclass, jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    getFilePaths4Sync
* Signature: (JJJLjava/lang/String;Ljava/util/ArrayList;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getFilePaths4Sync
	(JNIEnv *, jclass, jlong,jlong,jlong,jstring,jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    launchCatalogEx
* Signature: (Lcom/ca/arcflash/service/jni/model/CatalogJobContext;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_launchCatalogEx
	(JNIEnv *, jclass, jobject);

/*
* Class:     com_ca_arcflash_rps_jni_RPSWSJNI
* Method:    addMissedRPSJobHistory
* Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;JLjava/lang/String;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSSaveJS4FSOndemand
	(JNIEnv *env, jclass cls, jstring backupDest, jstring username, jstring pass, 
	jstring domain, jlong sessionNum, jstring vmInstanceID, jlong subSession, jstring sessionPass);

/*
* Class:	 com_ca_arcflash_rps_jni_RPSWSJNI
* Method:	 moveCatalogJobScript
* Signature: (JLjava/lang/String;JLjava/lang/String;Ljava/lang/String;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_moveCatalogJobScript
	(JNIEnv *, jclass, jlong, jstring, jlong, jstring, jstring);

/*
* Class:	 com_ca_arcflash_rps_jni_RPSWSJNI
* Method:	 rpsQueryJobQueue
* Signature: (JLjava/lang/String;Lcom/ca/arcflash/jni/common/JCatalogJobScriptInfo;ZLjava/lang/String;)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_rpsQueryJobQueue
	(JNIEnv *, jclass, jlong, jstring, jobject, jboolean, jstring);


/*
* Class:	 com_ca_arcflash_rps_jni_RPSWSJNI
* Method:	 isCatalogAvailable
* Signature: (JLjava/lang/String;Ljava/lang/String)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_isCatalogAvailable
	(JNIEnv *, jclass, jlong, jstring, jstring);

/*
* Class:	 com_ca_arcflash_rps_jni_RPSWSJNI
* Method:	 isCatalogAvailable
* Signature: (JLjava/lang/String;Ljava/lang/String)J
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_rpsRepNetworkThrottling
	(JNIEnv *, jclass, jlong, jstring, jobject);


/*
* Class:	 com_ca_arcflash_rps_jni_RPSWSJNI
* Method:	 rpsXVerifyDestUser
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_rpsXVerifyDestUser
	(JNIEnv *, jclass, jstring jstrUser, jstring jstrPSW, jstring jstrPath);

/*
* Class:	 com_ca_arcflash_rps_jni_RPSWSJNI
* Method:	 RPSGetNetworkPathForMappedDrive
*/
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSGetNetworkPathForMappedDrive
	(JNIEnv *env, jclass clz, jstring userName, jobject mapList);

/*
* Class:	 com_ca_arcflash_rps_jni_RPSWSJNI
* Method:	 GetCatalogStatus
*/
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetCatalogStatus
	(JNIEnv *env, jclass jclz, jstring jsessionPath);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getSwitchIntFromFile
 * Signature: (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getSwitchIntFromFile
  (JNIEnv *, jclass, jstring, jstring, jint, jstring);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getSwitchIntFromReg
 * Signature: (Ljava/lang/String;ILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getSwitchIntFromReg
  (JNIEnv *, jclass, jstring, jint, jstring);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getSwitchStringFromFile
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getSwitchStringFromFile
  (JNIEnv *, jclass, jstring, jstring, jstring, jstring);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getSwitchStringFromReg
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getSwitchStringFromReg
  (JNIEnv *, jclass, jstring, jstring, jstring);


JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getCatalogStatusEx
	(JNIEnv *, jclass, jobject, jstring);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    getDateTimeFormat
 * Signature: (Lcom/ca/arcflash/webservice/data/DateFormat;)I
 */
JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getDateTimeFormat	
  (JNIEnv *, jclass, jobject);

JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFIRemoveCatalogJS
	(JNIEnv *, jclass, jlong, jstring, jstring);

JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetProtectionInformation
	(JNIEnv *env, jclass clz, jstring destination, jstring domain,jstring user,jstring pwd, jobject list);

JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetRecoveryPoint
	(JNIEnv *env, jclass clz, jstring destination,jstring domain,jstring user,jstring pwd,jstring jStringBeginDate, jstring jStringEndDate, jobject list, jboolean jQueryDetail);

JNIEXPORT jint JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_ASBUGetRecoveryPoint
	(JNIEnv *env, jclass clz, jstring destination, jstring jStringBeginDate, jstring jStringEndDate, jobject list, jboolean jQueryDetail);

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFGetSystemInfo
	(JNIEnv *env, jclass clz, jobject jSystemInfo);

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFCheckDirPathValid
	(JNIEnv *env, jclass clz, jobject jConn);

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_PurgeDataStore
	(JNIEnv *env, jclass clz, jobject jJobScript);

JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_DataStoreVerifyPathValidFreeSpace
	(JNIEnv * env, jclass clz, jstring jstrPath, jstring jstrUserName, jstring jstrPsw, jlong InitMinFreeDiskSpaceForDS);

JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSValidateSessPasswordByHash
  (JNIEnv *env, jclass clz, jstring password, jstring hashvalue);

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSEnumBackupDestinations
	(JNIEnv *env, jclass clz, jobject jConn, jobject jResult);

/*
 * Class:     com_ca_arcflash_rps_jni_RPSWSJNI
 * Method:    isMergeJobAvailableExt
 * Signature: (Lcom/ca/arcflash/service/jni/model/JMergeData;)J
 */
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_isMergeJobAvailableExt
  (JNIEnv *, jclass, jobject);

JNIEXPORT jintArray JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getLastArchiveToTapeSession(JNIEnv *env, jclass jcls, jstring backupDest, jstring userName, jstring passWord, jstring  keyPath);


JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetNodesIntegrityInDataStore
	(JNIEnv *env, jclass clz, jobject nodelist);

JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSIsASBUJobExisted
	(JNIEnv *env, jclass clz, jstring strBKDest);

JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_RPSAFIsPathUnderDatastore
	( JNIEnv *env, jclass clz, jstring strPath);

JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_generateBackupInfoDB
	(JNIEnv *env, jclass clz, jstring strBkDest, jstring usrName, jstring usrPwd);

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_getDataSizesFromStorage
	(JNIEnv *env, jclass clz, jobject jRetArrLst, jstring strSrc, jstring usrName, jstring usrPwd);

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFGetMaxStorageCapacity
	(JNIEnv *, jclass, jobject, jobject);

JNIEXPORT jlong JNICALL  Java_com_ca_arcflash_rps_jni_RPSWSJNI_CanArchiveJobBeSubmitted(JNIEnv *env, jclass clz, jobject inout_jArchiveJob);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_CanArchiveSourceDeleteJobBeSubmitted(JNIEnv *env, jclass clz, jobject inout_jArchiveJob);
JNIEXPORT jlong JNICALL  Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFArchive(JNIEnv *env, jclass jclz, jobject in_archiveJobScript);
JNIEXPORT jlong JNICALL  Java_com_ca_arcflash_rps_jni_RPSWSJNI_DeleteAllPendingFileCopyJobs(JNIEnv* env, jclass this_class, jstring strDest, jstring strDestDomain, jstring strDestUserName, jstring strDestPassword);
JNIEXPORT jlong JNICALL  Java_com_ca_arcflash_rps_jni_RPSWSJNI_DisableFileCopy(JNIEnv* env, jclass this_class, jstring strDest, jstring strDestDomain, jstring strDestUserName, jstring strDestPassword);
JNIEXPORT jlong JNICALL  Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFArchivePurge(JNIEnv *env, jclass jclz, jobject in_archiveJobScript);
JNIEXPORT jstring  JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetFileCopyCatalogPath(JNIEnv *env, jclass, jstring MachineName, jlong ProductType);
JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_IsArchiveJobRunning(JNIEnv *env, jclass clz, jstring d2dMachineName);
JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_IsFileArchiveJobRunning(JNIEnv *env, jclass clz, jstring d2dMachineName);
JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_IsArchiveRestoreJobRunning(JNIEnv *env, jclass clz, jstring d2dMachineName);
JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_IsArchivePurgeJobRunning(JNIEnv *env, jclass clz, jstring d2dMachineName);
JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_IsArchiveCatalogSyncJobRunning(JNIEnv *env, jclass clz, jstring d2dMachineName);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetLastArchiveCatalogUpdateTime2(JNIEnv *env, jclass clz, jstring catalogDirBasePath, jobject jDestInfo, jobject out_CatalogDetails);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_searchArchiveCatalogChildren2(JNIEnv *env, jclass clz, jstring catalogDirBasePath, jstring inFileName, jstring inHostName, jstring inSearchpath, jobject inArchiveDestConfig,
jlong in_lSearchOptions, jlong in_lIndex, jlong in_lCount, jobject archiveCatalogItems);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_ArchiveOpenMachine(JNIEnv *env, jclass clz, jstring catalogDirBasePath, jstring catalogDirUserName, jstring catalogDirPassword, jstring hostName, jobject jDestInfo, jobject pMachineHandle);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetArchiveVolumeList(JNIEnv *env, jclass clz, jlong pMachineHandle, jobject volumeList);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_ArchiveOpenVolume(JNIEnv *env, jclass clz, jlong pMachineHandle, jstring strVolume);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetArchiveChildItemCount(JNIEnv *env, jclass clz, jlong pVolumeHandle, jstring strPath, jobject childCount);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetArchiveChildItems(JNIEnv *env, jclass clz, jlong pVolumeHandle, jstring strPath, jobject archiveCatalogItems);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetArchiveChildItemsEx(JNIEnv *env, jclass clz, jlong pVolumeHandle, jstring strPath, jlong in_lIndex, jlong in_lCount, jobject archiveCatalogItems);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_ArchiveCloseVolume(JNIEnv *env, jclass clz, jlong pVolumeHandle);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_ArchiveCloseMachine(JNIEnv *env, jclass clz, jlong pMachineHandle);
JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetRPSDatastoreHashKey(JNIEnv *env, jclass clz, jstring bkDestPath, jstring dataStorePwd);

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFSaveAdminAccount(JNIEnv *env, jclass clz, jobject account);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFReadAdminAccount(JNIEnv *env, jclass clz, jobject account);

JNIEXPORT jboolean JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_CheckASBUAgent(JNIEnv *env, jclass clz);

JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetSessionOsVer(JNIEnv *env, jclass, jstring backupDest, jobject objosver);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_validateEncryptionSettings(JNIEnv *env, jclass clz, jobject in_archiveJobScript, jobject out_jErrorcode, jobject out_jCCIErrorCode);

JNIEXPORT jstring JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_GetWindowsTempDir(JNIEnv *env, jclass clz);
JNIEXPORT jlong JNICALL Java_com_ca_arcflash_rps_jni_RPSWSJNI_AFGetArchiveJobInfoCount(JNIEnv *env, jclass clz, jobject inout_jArchiveJob, jobject jobCount);

#ifdef __cplusplus
}
#endif
#endif  //_Included_com_ca_arcflash_rps_jni_RPSWSJNI_h
