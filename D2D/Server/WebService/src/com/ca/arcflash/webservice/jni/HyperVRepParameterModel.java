package com.ca.arcflash.webservice.jni;

import java.util.ArrayList;

import javax.xml.bind.JAXB;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlRootElement;

/**
 * 
 * 
 * #define HAJS_PROTOCOL_SHAREFOLEDR   0x01
	#define HAJS_PROTOCOL_SOCKET        0x02

	#define HAJS_DES_VHD_ORIGIN         0x00        //does not change the format
	#define HAJS_DES_VHD_PLAIN          0x01        //des format is plain VHD
	#define HAJS_DES_VHD_COMPRESS       0x02        //des format is compressed VHD

 unsigned long ulJobType; 
 //Can only be Data Transfer wchar_t* pwszJobID;
 * //job UUID unsigned long ulProtocol; //share folder or socket
 * 
 * wchar_t* pwszLocalUsername; wchar_t* pwszLocalPassword; wchar_t*
 * pwszProductNode;
 * 
 * //des wchar_t* pwszDesHostName; //Dest host name wchar_t* pwszDesPort; //Dest
 * port wchar_t* pwszDesFolder; //dest folder wchar_t* pwszUserName; wchar_t*
 * pwszPassword;
 * 
 * //src unsigned long ulSrcItemCnt; HA_SRC_ITEM* pSrcItemList;
 * 
 * //control unsigned long ulDesVHDFormat; unsigned long ulThrottling; unsigned
 * long ulCtlFlag; BOOL bCompressOnWire; BOOL bEncryptOnWire; BOOL
 * bOverwriteExist; wchar_t* pwszCryptPassword;
 * 
 * @author gonro07
 * 
 */
@XmlRootElement(name="HyperVReplicateParams")
public class HyperVRepParameterModel {
	public static final long HAJS_PROTOCOL_SHAREFOLEDR = 0x01L;
	public static final long HAJS_PROTOCOL_SOCKET = 0x02L;
	
	long ulJobType; // Can only be Data Transfer
	String pwszJobID; // job UUID
	long jobID; // job ID
	long ulProtocol; // share folder or socket

	String pwszLocalUsername;
	String pwszLocalPassword;
	String pwszProductNode;

	// des
	String pwszDesHostName; // Dest host name
	String pwszDesPort; // Dest port
	String pwszDesFolder; // dest folder
	String pwszUserName;
	String pwszPassword;

	// src
	long ulSrcItemCnt;
	ArrayList<SourceItemModel> pSrcItemList;

	// control
	long ulDesVHDFormat;
	long ulThrottling; // in MB
	long ulCtlFlag;
	boolean bCompressOnWire;
	boolean bEncryptOnWire;
	boolean bOverwriteExist;
	String pwszCryptPassword;
	
	//smart copy
	boolean  bSmartCopy;
    long     ulScSessBegin;
    long     ulScSessEnd;
    
    //swith replication destination
    //keep old destination
    private String pwszOldDesFolder;
    
    //afGuid is for updating corresponding monitor
    //For physical d2d machine, afguid is the afguid
    //For vsphere managed VM, afguid is the VM instance UUID which is generated by ESXServer
    private String afGuid;
    
    private long ulBackupDescType = 0; //Backup Session destination type: 0 - backup to share folder; 1 - backup to RPS datastore
    
	public void setUlJobType(long ulJobType) {
		this.ulJobType = ulJobType;
	}
	public void setPwszJobID(String pwszJobID) {
		this.pwszJobID = pwszJobID;
	}
	public void setUlProtocol(long ulProtocol) {
		this.ulProtocol = ulProtocol;
	}
	public void setPwszLocalUsername(String pwszLocalUsername) {
		this.pwszLocalUsername = pwszLocalUsername;
	}
	public void setPwszLocalPassword(String pwszLocalPassword) {
		this.pwszLocalPassword = pwszLocalPassword;
	}
	public void setPwszProductNode(String pwszProductNode) {
		this.pwszProductNode = pwszProductNode;
	}
	public void setPwszDesHostName(String pwszDesHostName) {
		this.pwszDesHostName = pwszDesHostName;
	}
	public void setPwszDesPort(String pwszDesPort) {
		this.pwszDesPort = pwszDesPort;
	}
	public void setPwszDesFolder(String pwszDesFolder) {
		this.pwszDesFolder = pwszDesFolder;
	}
	public void setPwszUserName(String pwszUserName) {
		this.pwszUserName = pwszUserName;
	}
	public void setPwszPassword(String pwszPassword) {
		this.pwszPassword = pwszPassword;
	}
	public void setUlSrcItemCnt(long ulSrcItemCnt) {
		this.ulSrcItemCnt = ulSrcItemCnt;
	}
	public void setpSrcItemList(ArrayList<SourceItemModel> pSrcItemList) {
		this.pSrcItemList = pSrcItemList;
	}
	public void setUlDesVHDFormat(long ulDesVHDFormat) {
		this.ulDesVHDFormat = ulDesVHDFormat;
	}
	public void setUlThrottling(long ulThrottling) {
		this.ulThrottling = ulThrottling;
	}
	public void setUlCtlFlag(long ulCtlFlag) {
		this.ulCtlFlag = ulCtlFlag;
	}
	public void setbCompressOnWire(boolean bCompressOnWire) {
		this.bCompressOnWire = bCompressOnWire;
	}
	public void setbEncryptOnWire(boolean bEncryptOnWire) {
		this.bEncryptOnWire = bEncryptOnWire;
	}
	public void setbOverwriteExist(boolean bOverwriteExist) {
		this.bOverwriteExist = bOverwriteExist;
	}
	public void setPwszCryptPassword(String pwszCryptPassword) {
		this.pwszCryptPassword = pwszCryptPassword;
	}
	public long getUlJobType() {
		return ulJobType;
	}
	public String getPwszJobID() {
		return pwszJobID;
	}
	public long getUlProtocol() {
		return ulProtocol;
	}
	public String getPwszLocalUsername() {
		return pwszLocalUsername;
	}
	public String getPwszLocalPassword() {
		return pwszLocalPassword;
	}
	public String getPwszProductNode() {
		return pwszProductNode;
	}
	public String getPwszDesHostName() {
		return pwszDesHostName;
	}
	public String getPwszDesPort() {
		return pwszDesPort;
	}
	public String getPwszDesFolder() {
		return pwszDesFolder;
	}
	public String getPwszUserName() {
		return pwszUserName;
	}
	public String getPwszPassword() {
		return pwszPassword;
	}
	public long getUlSrcItemCnt() {
		return ulSrcItemCnt;
	}
	
	@XmlElementWrapper(name="SourceItemList")
	@XmlElements({
		@XmlElement(name="SourceItem",type=SourceItemModel.class)
	})
	public ArrayList<SourceItemModel> getpSrcItemList() {
		return pSrcItemList;
	}
	public long getUlDesVHDFormat() {
		return ulDesVHDFormat;
	}
	public long getUlThrottling() {
		return ulThrottling;
	}
	public long getUlCtlFlag() {
		return ulCtlFlag;
	}
	public boolean isbCompressOnWire() {
		return bCompressOnWire;
	}
	public boolean isbEncryptOnWire() {
		return bEncryptOnWire;
	}
	public boolean isbOverwriteExist() {
		return bOverwriteExist;
	}
	public String getPwszCryptPassword() {
		return pwszCryptPassword;
	}
	
	//if proxy is enabled,D2D2VMDK 
	private int ulReplicaConvType;// 0 for D2D2VHD; 1 for D2D2VMDK
	public int getUlReplicaConvType() {
		return ulReplicaConvType;
	}

	public void setUlReplicaConvType(int ulReplicaConvType) {
		this.ulReplicaConvType = ulReplicaConvType;
	}
	
	//for proxy support
	private VMwareRepParameterModel vmwareRepModel;
	
	@XmlElement(name="ESXProxyParams")
	public VMwareRepParameterModel getVmwareRepModel() {
		return vmwareRepModel;
	}
	public void setVmwareRepModel(VMwareRepParameterModel vmwareRepModel) {
		this.vmwareRepModel = vmwareRepModel;
	}
		//smart copy
	public boolean isbSmartCopy() {
		return bSmartCopy;
	}
	public void setbSmartCopy(boolean bSmartCopy) {
		this.bSmartCopy = bSmartCopy;
	}
	public long getUlScSessBegin() {
		return ulScSessBegin;
	}
	public void setUlScSessBegin(long ulScSessBegin) {
		this.ulScSessBegin = ulScSessBegin;
	}
	public long getUlScSessEnd() {
		return ulScSessEnd;
	}
	public void setUlScSessEnd(long ulScSessEnd) {
		this.ulScSessEnd = ulScSessEnd;
	}
	
	public String getPwszOldDesFolder() {
		return pwszOldDesFolder;
	}
	public void setPwszOldDesFolder(String pwszOldDesFolder) {
		this.pwszOldDesFolder = pwszOldDesFolder;
	}
	public String getAfGuid() {
		return afGuid;
	}
	public void setAfGuid(String afGuid) {
		this.afGuid = afGuid;
	}
	
	public long getBackupDescType() {
		return ulBackupDescType;
	}
	public void setBackupDescType(long ulBackupDescType) {
		this.ulBackupDescType = ulBackupDescType;
	}
	
	public long getJobID() {
		return jobID;
	}
	public void setJobID(long jobID) {
		this.jobID = jobID;
	}
	
	public static void main(String[] args) {
		
		HyperVRepParameterModel hyperVModel = new HyperVRepParameterModel();
		hyperVModel.setAfGuid("tests");
		hyperVModel.setPwszDesFolder("c:\\");
		hyperVModel.setPwszDesHostName("uuu");
		hyperVModel.setPwszDesPort("8014");
		
		SourceItemModel s = new SourceItemModel();
		s.setPwszSFUsername("admin");
		s.setPwszSFPassword("1111");
		ArrayList<FileItemModel> l = new ArrayList<FileItemModel>();
		FileItemModel f = new FileItemModel();
		f.setFileDestination("e:\\");
		f.setFilePath("1.d2d");
		f.setFileVMDKUrl("1.vmdk");
		l.add(f);
		f = new FileItemModel();
		f.setFileDestination("e:\\");
		f.setFilePath("2.d2d");
		f.setFileVMDKUrl("2.vmdk");
		l.add(f);
		f = new FileItemModel();
		f.setFileDestination("e:\\");
		f.setFilePath("3.d2d");
		f.setFileVMDKUrl("3.vmdk");
		l.add(f);
		s.setFiles(l);
		
		ArrayList<SourceItemModel> t = new ArrayList<SourceItemModel>();
		t.add(s);
		hyperVModel.setpSrcItemList(t);
		
		VMwareRepParameterModel v = new VMwareRepParameterModel();
		v.setFiles(l);
		v.setSnapshotUrl("snapshot-1");
		
		hyperVModel.setVmwareRepModel(v);
		
		JAXB.marshal(hyperVModel, System.out);
		
	}
	
}
