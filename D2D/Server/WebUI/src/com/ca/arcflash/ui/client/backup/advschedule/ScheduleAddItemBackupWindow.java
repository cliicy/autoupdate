package com.ca.arcflash.ui.client.backup.advschedule;import com.ca.arcflash.ui.client.FlashUIConstants;import com.ca.arcflash.ui.client.FlashUIMessages;import com.ca.arcflash.ui.client.UIContext;import com.ca.arcflash.ui.client.backup.schedule.ScheduleUtils;import com.ca.arcflash.ui.client.backup.schedule.ScheduleUtils.ScheduleTypeModel;import com.ca.arcflash.ui.client.common.BaseComboBox;import com.extjs.gxt.ui.client.data.BaseModelData;import com.extjs.gxt.ui.client.data.ModelData;import com.extjs.gxt.ui.client.event.SelectionChangedEvent;import com.extjs.gxt.ui.client.event.SelectionChangedListener;import com.extjs.gxt.ui.client.store.ListStore;import com.extjs.gxt.ui.client.widget.LayoutContainer;import com.extjs.gxt.ui.client.widget.form.ComboBox;import com.extjs.gxt.ui.client.widget.layout.TableLayout;import com.google.gwt.user.client.Element;                                                                          public class ScheduleAddItemBackupWindow extends ScheduleAddItemBaseWindow{		private ScheduleAddItemRegularBackupPanel scheduleRegularBackupPanel;	private ScheduleAddItemDailyBackupPanel scheduleDailyBackupPanel;	private ScheduleAddItemWeeklyBackupPanel scheduleWeeklyBackupPanel;	private ScheduleAddItemMonthlyBackupPanel scheduleMonthlyBackupPanel;	private ComboBox<ModelData> backupTypeBox;	private static FlashUIMessages uiMessages=UIContext.Messages;	private static FlashUIConstants uiConstants=UIContext.Constants;	private final static String[] backupType = { uiConstants.addRegularBackupSchedule(), uiConstants.addOnceDailyBackupSchedule(),		uiConstants.addOnceWeeklyBackupSchedule(), uiConstants.addOnceMonthlyBackupSchedule()};	public ScheduleAddItemBackupWindow(ScheduleItemModel model,boolean isNewAdd){		super(model, isNewAdd);		this.setWidth(510);		this.setHeight(395);		LayoutContainer container = new LayoutContainer();		container.ensureDebugId("99585d0c-a23f-406e-9d14-d14bbd5971ff");		this.add(container);				TableLayout tl = new TableLayout(2);		tl.setWidth("100%");		tl.setCellPadding(2);		tl.setCellSpacing(2);		container.setLayout(tl);				backupTypeBox = createBackupTypeCombox();		this.add(backupTypeBox);		scheduleRegularBackupPanel = new ScheduleAddItemRegularBackupPanel(model);		this.add(scheduleRegularBackupPanel);		scheduleDailyBackupPanel=new ScheduleAddItemDailyBackupPanel(model);		this.add(scheduleDailyBackupPanel);		scheduleWeeklyBackupPanel = new ScheduleAddItemWeeklyBackupPanel(model);		this.add(scheduleWeeklyBackupPanel);		scheduleMonthlyBackupPanel = new ScheduleAddItemMonthlyBackupPanel(model);		this.add(scheduleMonthlyBackupPanel);				setActivePanel(ScheduleTypeModel.RepeatJob);	}		@Override	protected void onRender(Element parent, int pos) {		super.onRender(parent, pos);				if(OKButtonListener!=null)			OKButton.addSelectionListener(OKButtonListener);	}		@Override	public void updateData(){		if(model.getScheduleType() == ScheduleTypeModel.OnceDailyBackup){			scheduleDailyBackupPanel.updateData();		}else if(model.getScheduleType() == ScheduleTypeModel.OnceWeeklyBackup){			scheduleWeeklyBackupPanel.updateData();		}else if(model.getScheduleType() == ScheduleTypeModel.OnceMonthlyBackup){			scheduleMonthlyBackupPanel.updateData();		}else if(model.getScheduleType() == ScheduleTypeModel.RepeatJob){			if(model.getJobType() == ScheduleUtils.FULL_BACKUP ||					model.getJobType() == ScheduleUtils.INC_BACKUP ||					model.getJobType() == ScheduleUtils.VERIFY_BACKUP)				scheduleRegularBackupPanel.updateData();		}		setActivePanel(model.getScheduleType());	}		private ComboBox<ModelData> createBackupTypeCombox(){		ListStore<ModelData> backupTypeStore = new ListStore<ModelData>();		BaseComboBox<ModelData> bkCombox = new BaseComboBox<ModelData>();		bkCombox.setDisplayField("text");		bkCombox.setValueField("typeOfBackup");		bkCombox.setStore(backupTypeStore);		bkCombox.setEditable(false);		bkCombox.setAllowBlank(false);		bkCombox.setWidth(480);		bkCombox.setStyleAttribute("margin", "8px");		bkCombox.addSelectionChangedListener(getSelectionChangedListener());		ModelData selectModel = null;		for (int i = 0; i < backupType.length; i++) {			ModelData md = new BaseModelData();			md.set("text", backupType[i]);			md.set("typeOfBackup", i);			backupTypeStore.add(md);			if (model.getScheduleType() == i) {				selectModel = md;			}		}		bkCombox.setValue(selectModel);				return bkCombox;	}		private SelectionChangedListener<ModelData> getSelectionChangedListener() {		return new SelectionChangedListener<ModelData>() {			@Override			public void selectionChanged(SelectionChangedEvent<ModelData> se) {				ModelData modelData = se.getSelectedItem();				if (modelData != null) {					setActivePanel((Integer)modelData.get("typeOfBackup"));									}			}		};	}		void setActivePanel(int backupType){		if (scheduleRegularBackupPanel != null				&& scheduleDailyBackupPanel != null				&& scheduleWeeklyBackupPanel != null				&& scheduleMonthlyBackupPanel != null) {			scheduleRegularBackupPanel.hide();			scheduleDailyBackupPanel.hide();			scheduleWeeklyBackupPanel.hide();			scheduleMonthlyBackupPanel.hide();			switch (backupType) {			case ScheduleTypeModel.RepeatJob:				scheduleRegularBackupPanel.show();				break;			case ScheduleTypeModel.OnceDailyBackup:				scheduleDailyBackupPanel.show();				break;			case ScheduleTypeModel.OnceWeeklyBackup:				scheduleWeeklyBackupPanel.show();				break;			case ScheduleTypeModel.OnceMonthlyBackup:				scheduleMonthlyBackupPanel.show();				break;			default:				scheduleRegularBackupPanel.show();				break;			}		}	}		private ScheduleAddItemBasePanel getActivePanel(){				switch((Integer)backupTypeBox.getValue().get("typeOfBackup")){		case ScheduleTypeModel.RepeatJob:			return scheduleRegularBackupPanel;		case ScheduleTypeModel.OnceDailyBackup:			return scheduleDailyBackupPanel;					case ScheduleTypeModel.OnceWeeklyBackup:			return scheduleWeeklyBackupPanel;		case ScheduleTypeModel.OnceMonthlyBackup:				return scheduleMonthlyBackupPanel;											}				return scheduleRegularBackupPanel;		}	@Override	protected String getScheduleAddWindowHeader(){		return UIContext.Constants.scheduleAddWindowHeader();	}		@Override	protected String getScheduleEditWindowHeader(){		return UIContext.Constants.scheduleEditWindowHeader();	}			@Override	public ScheduleItemModel save() {		return getActivePanel().save();			}		@Override	public boolean validate() {		return getActivePanel().validate();		}		@Override	public ScheduleItemModel getCurrentModel() {		return getActivePanel().getCurrentModel();	}		@Override	protected String getScheduleHelpURL(){		return UIContext.externalLinks.getBackupSettingAdvanceScheduleHelp();	}}