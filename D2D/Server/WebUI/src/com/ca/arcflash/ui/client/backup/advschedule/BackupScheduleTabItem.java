package com.ca.arcflash.ui.client.backup.advschedule;import java.util.Date;import com.ca.arcflash.ui.client.FlashUIConstants;import com.ca.arcflash.ui.client.UIContext;import com.ca.arcflash.ui.client.backup.advschedule.ScheduleGridPanelBackup.UpdateControls;import com.ca.arcflash.ui.client.backup.schedule.AdvanceScheduleModel;import com.ca.arcflash.ui.client.common.AdvScheduleUtil;import com.ca.arcflash.ui.client.common.HasValidateValue;import com.ca.arcflash.ui.client.common.SettingsGroupType;import com.ca.arcflash.ui.client.model.BackupSettingsModel;import com.ca.arcflash.ui.client.vsphere.setting.ScheduleVMRecoveryPointCheckPanel;import com.extjs.gxt.ui.client.Style.VerticalAlignment;import com.extjs.gxt.ui.client.widget.HorizontalPanel;import com.extjs.gxt.ui.client.widget.LayoutContainer;import com.extjs.gxt.ui.client.widget.form.LabelField;import com.extjs.gxt.ui.client.widget.layout.TableData;import com.google.gwt.user.client.Command;import com.google.gwt.user.client.Element;public class BackupScheduleTabItem extends LayoutContainer implements		HasValidateValue<BackupSettingsModel>, UpdateControls {		private FlashUIConstants uiConstants = UIContext.Constants;	private ScheduleGridPanelBackup scheduleSettings;	private ScheduleRetentionSettingPanel scheduleRetentionSettings;//	private ScheduleRecoverySetsPanel scheduleRecoverySetsPanel;//	private ScheduleRecoverySetBackupPanel scheduleRecoverySetBackupPanel;	private ScheduleCatalogGenerationPanel scheduleCatalogGenerationPanel;//	private ComboBox<ModelData> recoveryPointBox;//	private ListStore<ModelData> recoveryPointStore = new ListStore<ModelData>();//	private LayoutContainer recoveryPointTypeContainer = new LayoutContainer();	private ScheduleRecoverySetStartDateTimePanel startTimePanel;	private LayoutContainer startTimeContainer = new LayoutContainer();//	private static FlashUIConstants uiConstants = UIContext.Constants;//	private final static String[] recoveryPointType = {//			uiConstants.recoveryPointbyPoints(),//			uiConstants.recoveryPointbySets() };	private boolean isToRps = false;	private BackupSettingsModel context;		private SettingsGroupType settingsGroupType;		private ScheduleVMRecoveryPointCheckPanel checkPanel;		public BackupScheduleTabItem(){		this(null);	}	public BackupScheduleTabItem(SettingsGroupType settingsGroupType) {		this.settingsGroupType = settingsGroupType;				scheduleSettings = new ScheduleGridPanelBackup(this);				scheduleSettings.ensureDebugId("4f8db16a-842b-4fc4-b707-c3c915572ab4");	//	recoveryPointBox = createRecoveryPointCombox();//		scheduleRecoverySetBackupPanel = new ScheduleRecoverySetBackupPanel();		scheduleRetentionSettings = new ScheduleRetentionSettingPanel();//		scheduleRecoverySetsPanel = new ScheduleRecoverySetsPanel();		scheduleCatalogGenerationPanel = new ScheduleCatalogGenerationPanel();		startTimePanel = new ScheduleRecoverySetStartDateTimePanel();				checkPanel = new ScheduleVMRecoveryPointCheckPanel();		checkPanel.disable();	}	public ScheduleGridPanelBackup getScheduleSettings() {		return scheduleSettings;	}		private Command switchCmd = new Command() {		@Override		public void execute() {			isToRps = false;			if (context != null && context.isBackupToRps() != null) {				isToRps = context.isBackupToRps();			}//			scheduleSettings.hide();//			scheduleRetentionSettings.hide();//			scheduleRecoverySetsPanel.hide();//			scheduleRecoverySetBackupPanel.hide();//			recoveryPointTypeContainer.hide();////			if (isToRps) {//				scheduleSettings.show();//				scheduleRetentionSettings.show();//			} else {//				recoveryPointTypeContainer.show();//				if ((Integer) (recoveryPointBox.getValue()//						.get("typeOfRecoveryPoint")) == 1) {//					scheduleRetentionSettings.show();//					scheduleSettings.show();//				} else {//					scheduleRecoverySetsPanel.show();//					scheduleRecoverySetBackupPanel.show();//				}//			}		}	};	public void RefreshData(BackupSettingsModel model, boolean isEdit,			boolean showMergeGrid) {		context = model;		switchCmd.execute();		this.applyValue(model);	}	@Override	protected void onRender(Element parent, int index) {		super.onRender(parent, index);		LayoutContainer m = AdvScheduleUtil.wrap(this);		//		recoveryPointTypeContainer.add(AdvScheduleUtil.createFormLayout(uiConstants.recoveryPointManage(), recoveryPointBox), AdvScheduleUtil.createLineLayoutData());		startTimeContainer.add(createStartTimePanel(), AdvScheduleUtil.createLineLayoutData());//		m.add(recoveryPointTypeContainer, AdvScheduleUtil.createLineLayoutData());		m.add(scheduleSettings, AdvScheduleUtil.createLineLayoutData());//		m.add(scheduleRecoverySetBackupPanel, AdvScheduleUtil.createLineLayoutData());		m.add(startTimeContainer, AdvScheduleUtil.createLineLayoutData());		m.add(scheduleRetentionSettings, AdvScheduleUtil.createLineLayoutData());//		m.add(scheduleRecoverySetsPanel, AdvScheduleUtil.createLineLayoutData());        m.add(scheduleCatalogGenerationPanel, AdvScheduleUtil.createLineLayoutData());                if (settingsGroupType == SettingsGroupType.VMBackupSettings){        	scheduleCatalogGenerationPanel.showCheckboxGenerateGRTCatalog(true);        	m.add(checkPanel, AdvScheduleUtil.createLineLayoutData());        }	}	private LayoutContainer createStartTimePanel(){		HorizontalPanel p=new HorizontalPanel();		TableData td = new TableData();		td.setWidth("200");		td.setVerticalAlign(VerticalAlignment.MIDDLE);		p.add(new LabelField(uiConstants.scheduleStartTimeEx()), td);		p.add(startTimePanel);				return p;	}	@Override	public void buildValue(BackupSettingsModel pvalue) {				scheduleRetentionSettings.buildValue(pvalue);		if(pvalue.advanceScheduleModel != null) {			scheduleSettings.buildValue(pvalue.advanceScheduleModel);			if(startTimeContainer.isEnabled()){				Date startDate = startTimePanel.getStartDateTime(UIContext.serverVersionInfo.getTimeZoneOffset());				pvalue.advanceScheduleModel.setBackupStartTime(startDate.getTime());			}else{				pvalue.advanceScheduleModel.setBackupStartTime(0L);			}		}		scheduleCatalogGenerationPanel.buildValue(pvalue);		}	@Override	public void applyValue(BackupSettingsModel pvalue) {		AdvanceScheduleModel value = pvalue.advanceScheduleModel;		scheduleSettings.applyValue(value);		scheduleRetentionSettings.applyValue(pvalue);		scheduleCatalogGenerationPanel.applyValue(pvalue);		long startTime = (value.getBackupStartTime() == null) ? 0 : value.getBackupStartTime();				startTimePanel.setStartDateTime((startTime==0) ? new Date(): new Date(startTime));		startTimeContainer.setEnabled(scheduleSettings.getBackupScheduleCount() > 0);		checkPanel.applyValue(pvalue);	}	@Override	public boolean validate() {		if (isToRps) {			if (!scheduleRetentionSettings.validate()) {				return false;			}		} else {//			if ((Integer) (recoveryPointBox.getValue()//					.get("typeOfRecoveryPoint")) == 1) {				if (!scheduleRetentionSettings.validate()						|| !scheduleSettings.validate()) {					return false;				}//			} else {//				if (!scheduleRecoverySetsPanel.validate()//						|| !scheduleRecoverySetBackupPanel.validate()) {//					return false;//				}//			}		}		return true;	}	@Override	public void updateRetetntionCount(int backupType,int count) {		this.scheduleRetentionSettings.updateRetetntionCount(backupType,count);			this.scheduleCatalogGenerationPanel.enableCatalog(backupType);	}	@Override	public void hideRetentionCount(int backupType) {		this.scheduleRetentionSettings.disableRetentionCount(backupType);		this.scheduleCatalogGenerationPanel.disableCatalog(backupType);			}	@Override	public int getRetentionCount(int backupType) {		return this.scheduleRetentionSettings.getRetentionCount(backupType);	}	@Override	public void enableStartTime(boolean enabled) {		this.startTimeContainer.setEnabled(enabled);			}	public void setEditable(boolean isEnabled) {		scheduleSettings.setEnabled(isEnabled);		scheduleSettings.setEditable(isEnabled);		scheduleRetentionSettings.setEnabled(isEnabled);		startTimeContainer.setEnabled(isEnabled);		scheduleCatalogGenerationPanel.setEnabled(isEnabled);	}				public ScheduleCatalogGenerationPanel getScheduleCatalogGenerationPanel() {		return scheduleCatalogGenerationPanel;	}}